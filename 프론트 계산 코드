const express = require("express");
const mysql = require("mysql");
const bodyParser = require("body-parser");
const cors = require("cors");

const app = express();
const PORT = 3000;

// Middleware
app.use(cors());
app.use(bodyParser.json());

// MySQL Connection
const db = mysql.createConnection({
  host: "localhost",
  user: "root",
  password: "password", // Replace with your MySQL password
  database: "PersonalityTestDB",
});

// Connect to MySQL
db.connect((err) => {
  if (err) {
    console.error("Error connecting to MySQL:", err);
  } else {
    console.log("Connected to MySQL database.");
  }
});

// Utility Function: Calculate Results
const calculateHighestType = (scores) => {
  const aggregatedScores = {};

  // Aggregate scores for each personality type
  for (const [type, scoresList] of Object.entries(scores)) {
    const totalScore = scoresList.reduce((sum, score) => sum + score, 0);
    const count5 = scoresList.filter((score) => score === 5).length;
    const count4 = scoresList.filter((score) => score === 4).length;

    aggregatedScores[type] = { total: totalScore, count5, count4 };
  }

  // Sort by total score, then by count of 5s, then by count of 4s
  const sortedTypes = Object.entries(aggregatedScores).sort(([, a], [, b]) => {
    if (b.total !== a.total) return b.total - a.total;
    if (b.count5 !== a.count5) return b.count5 - a.count5;
    return b.count4 - a.count4;
  });

  return sortedTypes.length > 0 ? sortedTypes[0][0] : "No matching type";
};

// Route: Save User Scores
app.post("/api/Usertype", (req, res) => {
  const { scores } = req.body;

  if (!scores) {
    return res.status(400).json({ error: "Scores data is required." });
  }

  const highestType = calculateHighestType(scores);

  // Save scores and highest type to the database
  const query = "INSERT INTO user_results (scores, highest_type) VALUES (?, ?)";
  db.query(query, [JSON.stringify(scores), highestType], (err, result) => {
    if (err) {
      console.error("Error saving results:", err);
      return res.status(500).json({ error: "Failed to save results." });
    }
    res.status(200).json({ message: "Results saved successfully.", type: highestType });
  });
});

// Route: Get User Results
app.get("/api/Usertype", (req, res) => {
  // Fetch the latest user result (you can enhance this to support user-specific queries)
  const query = "SELECT * FROM user_results ORDER BY id DESC LIMIT 1";
  db.query(query, (err, results) => {
    if (err) {
      console.error("Error fetching results:", err);
      return res.status(500).json({ error: "Failed to fetch results." });
    }

    if (results.length === 0) {
      return res.status(404).json({ error: "No results found." });
    }

    const { highest_type: type } = results[0];
    res.status(200).json({ type });
  });
});

// Start the Server
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});
